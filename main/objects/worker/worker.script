local defgraph = require("defgraph.defgraph")
local gamestate = require("data.gamestate")

local function alert_state(self, handle, elapsed)
	self.standing_in_place = false
	self.movement_data = defgraph.move_initialize(go.get_position(), { gamestate.extinguishers_worker_node })
end

function init(self)
	self.walk_speed = 50
	self.run_speed = 100
	self.is_alerted = false
	self.standing_in_place = false

	self.wander_nodes = { 9, 7, 22, 24 }
	self.movement_data = defgraph.move_initialize(go.get_position(), self.wander_nodes, defgraph.ROUTETYPE.CYCLE)
	self.move_result = nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		if message.group == hash("fire") then
			if message.enter then
				if not self.is_alerted then
					self.is_alerted = true
					self.standing_in_place = true
					factory.create("#factory")
					timer.delay(1, false, alert_state)
				end
			end
		elseif message.group == hash("extinguishers") and message.enter and self.is_alerted then
			for k, v in pairs(gamestate.fires) do
				msg.post(v, "extinguish")
			end

			if gamestate.has_game_started then
				msg.post("/losescreen", "show")
				gamestate.has_game_started = false
			end
		end
	end
end

function update(self, dt)
	if not self.standing_in_place then
		if self.is_alerted then
			self.movement_data, self.move_result = defgraph.move_player(go.get_position(), self.run_speed * dt, self.movement_data)
		else
			self.movement_data, self.move_result = defgraph.move_player(go.get_position(), self.walk_speed * dt, self.movement_data)
		end
	end

	if self.move_result then
		go.set_position(self.move_result.position)
		--defgraph.debug_draw_player_move(self.movement_data, vmath.vector4(1, 1, 0, 1))
	end
end